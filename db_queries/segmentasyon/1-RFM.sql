INSERT INTO {SCHEMA_NAME}_ELT.RFM_STG
(
    UNIQUE_CUSTOMER_ID,
    KART_TIP_DETAY,
    SON_ALV_TARIH,
    SON_IADE_TARIH,
    RECENCY,
    RECENCY_GECERLI,
    RECENCY_IADE,
    SON_ISLEM_IADE,
    FREQUENCY,
    FREQUENCY_GECERLI,
    FREQUENCY_IADE,
    IADE_ORANI,
    MONETARY,
    MONETARY_GECERLI,
    MONETARY_IADE,
    IADE_CIRO_ORANI,
    KAZANILAN_TUTAR,
    HARCANAN_TUTAR,
    KAZANILAN_HARCANAN_TUTAR_ORAN,
    KAZANILAN_TRX_CNT,
    HARCANILAN_TRX_CNT
)
SELECT  
    B.UNIQUE_CUSTOMER_ID,
    C.PROGRAM_NAME AS KART_TIP_DETAY,
    MAX(CASE WHEN TRX_STATE_ID = 1 THEN TRUNC(TIMED_ID_TRANSACTION) END) AS SON_ALV_TARIH,
    MAX(CASE WHEN TRX_STATE_ID = 3 THEN TRUNC(TIMED_ID_TRANSACTION) END) AS SON_IADE_TARIH,
    TRUNC(SYSDATE) - MAX(TRUNC(TRANSACTION_DATE)) AS RECENCY,
    TRUNC(SYSDATE) - MAX(CASE WHEN TRX_STATE_ID = 1 THEN TRUNC(TRANSACTION_DATE) END) AS RECENCY_GECERLI,
    TRUNC(SYSDATE) - MAX(CASE WHEN TRX_STATE_ID = 3 THEN TRUNC(TRANSACTION_DATE) END) AS RECENCY_IADE,
    CASE 
        WHEN TRUNC(SYSDATE) - MAX(CASE WHEN TRX_STATE_ID = 3 THEN TRUNC(TRANSACTION_DATE) END) <= 
             TRUNC(SYSDATE) - MAX(CASE WHEN TRX_STATE_ID = 1 THEN TRUNC(TRANSACTION_DATE) END) 
        THEN 1 ELSE 0 
    END AS SON_ISLEM_IADE,
    COUNT(TRANSACTION_ID) AS FREQUENCY,
    COUNT(CASE WHEN TRX_STATE_ID = 1 THEN TRANSACTION_ID END) AS FREQUENCY_GECERLI,
    COUNT(CASE WHEN TRX_STATE_ID = 3 THEN TRANSACTION_ID END) AS FREQUENCY_IADE,
    ROUND(COUNT(CASE WHEN TRX_STATE_ID = 3 THEN TRANSACTION_ID END) / COUNT(TRANSACTION_ID), 4) AS IADE_ORANI,
    SUM(AMOUNT_AFTER_DISCOUNT) AS MONETARY,
    SUM(CASE WHEN TRX_STATE_ID = 1 THEN AMOUNT_AFTER_DISCOUNT END) AS MONETARY_GECERLI,
    SUM(CASE WHEN TRX_STATE_ID = 3 THEN AMOUNT_AFTER_DISCOUNT END) AS MONETARY_IADE,
    (SUM(CASE WHEN TRX_STATE_ID = 3 THEN AMOUNT_AFTER_DISCOUNT END) * -1) / 
    SUM(CASE WHEN TRX_STATE_ID = 1 THEN AMOUNT_AFTER_DISCOUNT END) AS IADE_CIRO_ORANI, 
    SUM(NVL(AMOUNT_EARNED_POINT, 0)) AS KAZANILAN_TUTAR,
    SUM(NVL(AMOUNT_USED_POINT, 0)) AS HARCANAN_TUTAR,
    ROUND(NVL(SUM(NVL(AMOUNT_USED_POINT, 0)) / NULLIF(SUM(NVL(AMOUNT_EARNED_POINT, 0)), 0), 0), 4) AS KAZANILAN_HARCANAN_TUTAR_ORAN,
    SUM(CASE WHEN AMOUNT_EARNED_POINT > 0 THEN 1 ELSE 0 END) AS KAZANILAN_TRX_CNT,
    SUM(CASE WHEN AMOUNT_USED_POINT > 0 THEN 1 ELSE 0 END) AS HARCANILAN_TRX_CNT
FROM 
    {SCHEMA_NAME}.TRANSACTION_MAIN A,
    {SCHEMA_NAME}.CUSTOMER_STG B,
    {SCHEMA_NAME}.DIM_PROGRAM C
WHERE   
    A.CUSTOMER_ID = B.CUSTOMER_ID
    AND B.PROGRAM_ID = C.PROGRAM_ID
    AND TRX_STATE_ID IN (1, 3)
    AND A.IS_DELETED = 0
GROUP BY 
    B.UNIQUE_CUSTOMER_ID, C.PROGRAM_NAME
HAVING 
    SUM(AMOUNT_AFTER_DISCOUNT) > 15  -- This can be parameterized