WITH 
FILTERED_TRANSACTIONS AS (
    -- all valid transactions up to the current date
    SELECT trx.*
    FROM {SCHEMA_NAME}.TRANSACTION_MAIN trx
    WHERE trx.IS_DELETED = 0
      AND trx.TRX_STATE_ID IN (1, 3)
      AND trx.AMOUNT_AFTER_DISCOUNT IS NOT NULL
      AND trx.TRANSACTION_DATE <= SYSDATE
),
CUSTOMER_BASE AS (
    /* Aggregate customer-level features from valid transactions */
    SELECT
        cust.UNIQUE_CUSTOMER_ID,
        cust.FIRM_ID,
        trx.PROGRAM_ID,
        prg.PROGRAM_NAME,
        MIN(trx.TRANSACTION_DATE) AS FIRST_TRANSACTION_DATE,
        MAX(trx.TRANSACTION_DATE) AS LAST_TRANSACTION_DATE,
        COUNT(trx.TRANSACTION_ID) AS TOTAL_TRANSACTIONS,
        SUM(trx.AMOUNT_AFTER_DISCOUNT) AS TOTAL_SPENT,
        AVG(trx.AMOUNT_AFTER_DISCOUNT) AS AVG_SPENT,
        MAX(trx.AMOUNT_AFTER_DISCOUNT) AS MAX_SPENT,
        MIN(trx.AMOUNT_AFTER_DISCOUNT) AS MIN_SPENT,
        SYSDATE - MAX(trx.TRANSACTION_DATE) AS DAYS_SINCE_LAST_TRANSACTION,
        (MAX(trx.TRANSACTION_DATE) - MIN(trx.TRANSACTION_DATE)) AS CUSTOMER_LIFETIME
    FROM {SCHEMA_NAME}.CUSTOMER_STG cust
    INNER JOIN FILTERED_TRANSACTIONS trx
      ON cust.CUSTOMER_ID = trx.CUSTOMER_ID
    LEFT JOIN {SCHEMA_NAME}.DIM_PROGRAM prg 
      ON trx.PROGRAM_ID = prg.PROGRAM_ID
    WHERE cust.IS_DELETED = 0
    GROUP BY cust.UNIQUE_CUSTOMER_ID, cust.FIRM_ID, trx.PROGRAM_ID, prg.PROGRAM_NAME 
    HAVING COUNT(trx.TRANSACTION_ID) > 3
       AND SUM(trx.AMOUNT_AFTER_DISCOUNT) > 100
),
TRANSACTION_DATES AS (
    --  transaction dates and related fields to compute frequency/engagement features
    SELECT
        trx.CUSTOMER_ID,
        trx.PROGRAM_ID,
        trx.TRANSACTION_DATE,
        trx.AMOUNT_AFTER_DISCOUNT,
        trx.AMOUNT_DISCOUNT,
        trx.AMOUNT_USED_POINT,
        trx.AMOUNT_EARNED_POINT,
        LAG(trx.TRANSACTION_DATE) OVER (PARTITION BY trx.CUSTOMER_ID ORDER BY trx.TRANSACTION_DATE) AS PREVIOUS_TRANSACTION_DATE
    FROM FILTERED_TRANSACTIONS trx
),
TRANSACTION_FEATURES AS (
    -- features such as distinct transactions, average days between transactions, and monetary/engagement metrics
    SELECT
        td.CUSTOMER_ID,
        td.PROGRAM_ID,
        COUNT(td.TRANSACTION_DATE) AS DISTINCT_TRANSACTIONS,
        AVG(td.TRANSACTION_DATE - td.PREVIOUS_TRANSACTION_DATE) AS AVG_DAYS_BETWEEN_TRANSACTIONS,
        PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY td.AMOUNT_AFTER_DISCOUNT) AS MEDIAN_BASKET_SIZE,
        STDDEV(td.AMOUNT_AFTER_DISCOUNT) AS BASKET_SIZE_STDDEV,
        SUM(CASE WHEN td.AMOUNT_DISCOUNT > 0 THEN td.AMOUNT_DISCOUNT ELSE 0 END) AS TOTAL_DISCOUNT_EARNED,
        COUNT(CASE WHEN td.AMOUNT_DISCOUNT > 0 THEN 1 ELSE NULL END) AS DISCOUNTED_TRANSACTIONS,
        SUM(CASE WHEN td.AMOUNT_USED_POINT > 0 THEN td.AMOUNT_USED_POINT ELSE 0 END) AS TOTAL_USED_POINT,
        SUM(CASE WHEN td.AMOUNT_EARNED_POINT > 0 THEN td.AMOUNT_EARNED_POINT ELSE 0 END) AS TOTAL_EARNED_POINT,
        COUNT(CASE WHEN td.AMOUNT_USED_POINT > 0 THEN 1 ELSE NULL END) AS POINT_USED_TRANSACTIONS
    FROM TRANSACTION_DATES td
    GROUP BY td.CUSTOMER_ID, td.PROGRAM_ID
),
PREDICTION_DATASET AS (
    -- aggregated customer data and transaction features into the final prediction dataset
    SELECT
        base.UNIQUE_CUSTOMER_ID,
        base.PROGRAM_ID,
        base.PROGRAM_NAME,
        base.FIRM_ID,
        base.FIRST_TRANSACTION_DATE,
        base.LAST_TRANSACTION_DATE,
        base.TOTAL_TRANSACTIONS,
        base.TOTAL_SPENT,
        base.AVG_SPENT,
        base.MAX_SPENT,
        base.MIN_SPENT,
        base.DAYS_SINCE_LAST_TRANSACTION,
        base.CUSTOMER_LIFETIME,
        trx_features.DISTINCT_TRANSACTIONS,
        trx_features.AVG_DAYS_BETWEEN_TRANSACTIONS,
        trx_features.MEDIAN_BASKET_SIZE,
        trx_features.BASKET_SIZE_STDDEV,
        trx_features.TOTAL_DISCOUNT_EARNED,
        trx_features.DISCOUNTED_TRANSACTIONS,
        trx_features.TOTAL_USED_POINT,
        trx_features.TOTAL_EARNED_POINT,
        trx_features.POINT_USED_TRANSACTIONS,
        0 AS IS_CHURN  --  target; the actual churn is unknown
    FROM CUSTOMER_BASE base
    LEFT JOIN TRANSACTION_FEATURES trx_features
       ON base.UNIQUE_CUSTOMER_ID = trx_features.CUSTOMER_ID 
       AND base.PROGRAM_ID = trx_features.PROGRAM_ID
)
SELECT *
FROM PREDICTION_DATASET